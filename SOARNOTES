Soar ЗАМЕТКИ

Создание элементов рабочей памяти:
1. Продукции. Действия RHS?
2. Архитектура. а)описания состояния б)описания оператора
3. Системы памяти
4. SVS
5. Окружение. Внешние входы/выходы

Удаление элементов рабочей памяти:
1. Процедурой решения - все описания состояния после разрешения тупика, для которого они были созданы
2. Процедурой решения - удаляет описания оператора о состоянии, когда он перестает быть текущим
3. reject?
4. Архитектурой - i-supported ЭРП (поддерживаемые экземпляром)
5. Вход/выход системой - неактуальные данные из input-link
6. Архитектурой - не связанные с состоянием ЭРПы

augmentation - дополнение

Продукция = условия + действия. Если условия = рабочей памяти -- продукция включается и выполняются действия. Порядок условий не важен (только первое условие должно явно проверять состояние). Экземпляры продукции создаются при использовании переменных.
Функции продукций: 1. Предложение оператора 2. Сравнение оператора 3. Применение оператора 4. Развитие(изменение) состояния
В основном действия продукции это - создание предпочтений или создание/удаление ЭРПов.

Память предпочтений. Предпочтения ссылаются на операторы, так выбирается текущий оператор. Единственное значение может быть выбрано текущим оператором. У предпочтений нет транзитивности. Когда два и более значения равнопредпочтительны Соар выбирает рандомно, это можно изменить decide indifferent-selection функцией. 

Блоки в коде Соар делятся на два типа: с оператором в условии и без. Те что без могут автоматически отзывать действия, когда условия перестают выполняться. i-supported and o-supported? Те что с оператором выполняются только одно за раз, если их несколько.

Цикл выполнения в соар (цикл принятия решения):
1. Вход. Получение новых данных с сенсоров в рабочую память (входные функции)
2. Предложение. Продукции выполняются(откатываются), выдвигают в кандидаты операторы и сравнивают их. i-supported(удаляются если продукция перестает быть актуальной (отзываются автоматически)). Так до установления равновесия (ни одна продукция не дает совпадение).
3. Решение. Выбран новый оператор или создано новое состояние, если тупик. 
4. Приложение.(Выполнение.) Выполняются продукции с оператором в условии. o-supported(удаляются в ручную). После этого блоки без операторов обрабатываются до момента равновесия.
5. Выход. Выходные команды отправляются во внешний мир. (выходные функции)

Soar
    while (HALT not true) Cycle;

Cycle
    InputPhase;
    ProposalPhase;
    DecisionPhase;
    ApplicationPhase;
    OutputPhase;

ProposalPhase
    while (some i-supported productions are waiting to fire or retract)
        FireNewlyMatchedProductions;
        RetractNewlyUnmatchedProductions;

DecisionPhase
    for (each state in the stack, starting with the top-level state)
    until (a new decision is reached)
        EvaluateOperatorPreferences; /* for the state being considered */
        if (one operator preferred after preference evaluation)
            SelectNewOperator;
        else /* could be no operator available or */
            CreateNewSubstate; /* unable to decide between more than one */
ApplicationPhase
    while (some productions are waiting to fire or retract)
        FireNewlyMatchedProductions;
        RetractNewlyUnmatchedProductions;

Тупики возникают, когда не получается выбрать один оператор, те есть противоречия и прочее. Для решения тупиков создаются подсостояния.

СИНТАКСИС
